POS/login.c:15:24: style:inconclusive: Function 'process_login' argument 1 names different: declaration 'data' definition 'date'. [funcArgNamesDifferent]
int process_login(char date[]) {
                       ^
POS/login.h:4:24: note: Function 'process_login' argument 1 names different: declaration 'data' definition 'date'.
int process_login(char data[]);
                       ^
POS/login.c:15:24: note: Function 'process_login' argument 1 names different: declaration 'data' definition 'date'.
int process_login(char date[]) {
                       ^
POS/payment_prompts.c:195:9: warning: %lld in format string (no. 2) requires 'long long' but the argument type is 'signed long'. [invalidPrintfArgType_sint]
        printf("%s\t%lld\t%lld\n", table->products[i].name, table->products[i].price, table->products[i].amount);
        ^
POS/payment_prompts.c:195:9: warning: %lld in format string (no. 3) requires 'long long' but the argument type is 'signed long'. [invalidPrintfArgType_sint]
        printf("%s\t%lld\t%lld\n", table->products[i].name, table->products[i].price, table->products[i].amount);
        ^
POS/payment_prompts.c:311:20: warning: sscanf() without field width limits can crash with huge input data. [invalidscanf]
        if ((ret = sscanf(input, "%[a-zA-Z ]", tmp)) != 1) break; // 상품명 읽기
                   ^
POS/payment_prompts.c:322:20: warning: sscanf() without field width limits can crash with huge input data. [invalidscanf]
        if ((ret = sscanf(input, "%[0-9.]", tmp)) != 1) break; // 상품 갯수 읽기
                   ^
POS/payment_prompts.c:103:13: style: The scope of the variable 'flag' can be reduced. [variableScope]
        int flag = 0;
            ^
POS/payment_prompts.c:42:25: style:inconclusive: Function 'get_total_price' argument 1 names different: declaration 'table' definition 'table_num'. [funcArgNamesDifferent]
int get_total_price(int table_num) {
                        ^
POS/payment_prompts.h:13:25: note: Function 'get_total_price' argument 1 names different: declaration 'table' definition 'table_num'.
int get_total_price(int table);
                        ^
POS/payment_prompts.c:42:25: note: Function 'get_total_price' argument 1 names different: declaration 'table' definition 'table_num'.
int get_total_price(int table_num) {
                        ^
POS/payment_prompts.c:55:26: style:inconclusive: Function 'pay_all_at_once' argument 1 names different: declaration 'table' definition 'table_num'. [funcArgNamesDifferent]
void pay_all_at_once(int table_num) {
                         ^
POS/payment_prompts.h:6:26: note: Function 'pay_all_at_once' argument 1 names different: declaration 'table' definition 'table_num'.
void pay_all_at_once(int table);
                         ^
POS/payment_prompts.c:55:26: note: Function 'pay_all_at_once' argument 1 names different: declaration 'table' definition 'table_num'.
void pay_all_at_once(int table_num) {
                         ^
POS/payment_prompts.c:78:25: style:inconclusive: Function 'pay_with_ratio' argument 1 names different: declaration 'table' definition 'table_num'. [funcArgNamesDifferent]
void pay_with_ratio(int table_num) {
                        ^
POS/payment_prompts.h:8:25: note: Function 'pay_with_ratio' argument 1 names different: declaration 'table' definition 'table_num'.
void pay_with_ratio(int table);
                        ^
POS/payment_prompts.c:78:25: note: Function 'pay_with_ratio' argument 1 names different: declaration 'table' definition 'table_num'.
void pay_with_ratio(int table_num) {
                        ^
POS/payment_prompts.c:175:24: style:inconclusive: Function 'pay_partially' argument 1 names different: declaration 'table' definition 'table_num'. [funcArgNamesDifferent]
void pay_partially(int table_num) {
                       ^
POS/payment_prompts.h:10:24: note: Function 'pay_partially' argument 1 names different: declaration 'table' definition 'table_num'.
void pay_partially(int table);
                       ^
POS/payment_prompts.c:175:24: note: Function 'pay_partially' argument 1 names different: declaration 'table' definition 'table_num'.
void pay_partially(int table_num) {
                       ^
POS/payment_prompts.c:250:23: style:inconclusive: Function 'end_purchase' argument 1 names different: declaration 'table' definition 'tablenum'. [funcArgNamesDifferent]
void end_purchase(int tablenum) {
                      ^
POS/payment_prompts.h:20:23: note: Function 'end_purchase' argument 1 names different: declaration 'table' definition 'tablenum'.
void end_purchase(int table);
                      ^
POS/payment_prompts.c:250:23: note: Function 'end_purchase' argument 1 names different: declaration 'table' definition 'tablenum'.
void end_purchase(int tablenum) {
                      ^
POS/payment_prompts.c:284:21: style:inconclusive: Function 'partial_pay' argument 1 names different: declaration 'table' definition 'table_num'. [funcArgNamesDifferent]
int partial_pay(int table_num, char* input) {
                    ^
POS/payment_prompts.h:24:21: note: Function 'partial_pay' argument 1 names different: declaration 'table' definition 'table_num'.
int partial_pay(int table, char *string);
                    ^
POS/payment_prompts.c:284:21: note: Function 'partial_pay' argument 1 names different: declaration 'table' definition 'table_num'.
int partial_pay(int table_num, char* input) {
                    ^
POS/payment_prompts.c:284:38: style:inconclusive: Function 'partial_pay' argument 2 names different: declaration 'string' definition 'input'. [funcArgNamesDifferent]
int partial_pay(int table_num, char* input) {
                                     ^
POS/payment_prompts.h:24:34: note: Function 'partial_pay' argument 2 names different: declaration 'string' definition 'input'.
int partial_pay(int table, char *string);
                                 ^
POS/payment_prompts.c:284:38: note: Function 'partial_pay' argument 2 names different: declaration 'string' definition 'input'.
int partial_pay(int table_num, char* input) {
                                     ^
POS/payment_prompts.c:379:18: style: Local variable 'tmp' shadows outer variable [shadowVariable]
            char tmp[16];
                 ^
POS/payment_prompts.c:287:11: note: Shadowed declaration
    char* tmp = malloc(sizeof(char) * (strlen(input) + 1)); // 원본 문자열과 동일한 크기의 임시 배열
          ^
POS/payment_prompts.c:379:18: note: Shadow variable
            char tmp[16];
                 ^
POS/payment_prompts.c:430:26: style: Local variable 'i' shadows outer variable [shadowVariable]
            for (int64_t i = index; i < updateLength; i++) { //앞으로 한칸씩 땡김
                         ^
POS/payment_prompts.c:412:14: note: Shadowed declaration
    for (int i = 0; i < arr_size; i++) {
             ^
POS/payment_prompts.c:430:26: note: Shadow variable
            for (int64_t i = index; i < updateLength; i++) { //앞으로 한칸씩 땡김
                         ^
POS/payment_prompts.c:82:11: style: Unused variable: confirm_str [unusedVariable]
    char* confirm_str;
          ^
POS/product.c:351:9: warning: %lld in format string (no. 2) requires 'long long' but the argument type is 'signed long'. [invalidPrintfArgType_sint]
        fprintf(fp, "%-15s\t\t%lld\n", all_products.products[i].name, all_products.products[i].price);
        ^
POS/product.c:35:9: style: The scope of the variable 'c' can be reduced. [variableScope]
    int c;
        ^
POS/product.c:208:8: warning: Storing getc() return value in char variable and then comparing with EOF. [checkCastIntToCharAndBack]
    if(c == EOF)//파일 끝
       ^
POS/product.c:238:29: warning: Storing getc() return value in char variable and then comparing with EOF. [checkCastIntToCharAndBack]
            if(c == '\n' || c == EOF)//탭보다 먼저 나오면 에러
                            ^
POS/product.c:262:46: warning: Storing getc() return value in char variable and then comparing with EOF. [checkCastIntToCharAndBack]
    if(c != ' ' && c != '\t' && c != '\n' && c != EOF)
                                             ^
POS/product.c:270:21: warning: Storing getc() return value in char variable and then comparing with EOF. [checkCastIntToCharAndBack]
    if(c != '\n' && c != EOF)//이 두 개가 아닌 다른게 나오면
                    ^
POS/settlement.c:39:13: warning: %lld in format string (no. 2) requires 'long long' but the argument type is 'signed long'. [invalidPrintfArgType_sint]
            fprintf(fp, "%s\t%lld\t%lld\t%lld\n", all_products.products[i].name, all_products.products[i].price, all_products.products[i].amount, all_products.products[i].price * all_products.products[i].amount);
            ^
POS/settlement.c:39:13: warning: %lld in format string (no. 3) requires 'long long' but the argument type is 'signed long'. [invalidPrintfArgType_sint]
            fprintf(fp, "%s\t%lld\t%lld\t%lld\n", all_products.products[i].name, all_products.products[i].price, all_products.products[i].amount, all_products.products[i].price * all_products.products[i].amount);
            ^
POS/settlement.c:39:13: warning: %lld in format string (no. 4) requires 'long long' but the argument type is 'signed long'. [invalidPrintfArgType_sint]
            fprintf(fp, "%s\t%lld\t%lld\t%lld\n", all_products.products[i].name, all_products.products[i].price, all_products.products[i].amount, all_products.products[i].price * all_products.products[i].amount);
            ^
POS/settlement.c:74:17: error: Resource leak: fp [resourceLeak]
                return;
                ^
POS/settlement.c:83:9: error: Resource leak: fp [resourceLeak]
        return;
        ^
POS/settlement.c:23:9: style: The scope of the variable 'sum' can be reduced. [variableScope]
    int sum = 0;
        ^
POS/settlement.c:49:10: style: The scope of the variable 'c' can be reduced. [variableScope]
    char c;
         ^
POS/settlement.c:208:24: style: Local variable 'date' shadows outer variable [shadowVariable]
    char checkdate[9], date[9];
                       ^
POS/settlement.c:19:12: note: Shadowed declaration
extern int date;
           ^
POS/settlement.c:208:24: note: Shadow variable
    char checkdate[9], date[9];
                       ^
POS/settlement.c:214:8: warning: Storing getc() return value in char variable and then comparing with EOF. [checkCastIntToCharAndBack]
    if(c == EOF)
       ^
POS/settlement.c:256:22: warning: Storing getc() return value in char variable and then comparing with EOF. [checkCastIntToCharAndBack]
    if (c == '\n' || c == EOF) {
                     ^
POS/settlement.c:273:9: warning: Storing getc() return value in char variable and then comparing with EOF. [checkCastIntToCharAndBack]
    if (c == EOF)//파일 끝
        ^
POS/settlement.c:342:22: warning: Storing getc() return value in char variable and then comparing with EOF. [checkCastIntToCharAndBack]
    if (c == '\n' || c == EOF) {
                     ^
POS/utils.c:252:9: error: Memory leak: p2 [memleak]
        return p2 ? p2 : p;
        ^
POS/utils.c:129:36: style: The comparison 'flag == -1' is always true. [knownConditionTrueFalse]
    for (int i = 0; i < 12 && flag == -1; i++) {
                                   ^
POS/utils.c:128:17: note: 'flag' is assigned value '-1' here.
    int flag = -1;
                ^
POS/utils.c:129:36: note: The comparison 'flag == -1' is always true.
    for (int i = 0; i < 12 && flag == -1; i++) {
                                   ^
POS/utils.c:173:9: style: The scope of the variable 'day' can be reduced. [variableScope]
    int day, year, month, date;
        ^
POS/utils.c:205:13: style: Local variable 'day' shadows outer variable [shadowVariable]
        int day = atoi(date_input);
            ^
POS/utils.c:173:9: note: Shadowed declaration
    int day, year, month, date;
        ^
POS/utils.c:205:13: note: Shadow variable
        int day = atoi(date_input);
            ^
POS/utils.c:243:27: error: Undefined behavior: Variable 'at' is used as parameter and destination in sprintf(). [sprintfOverlappingData]
    sprintf(at, "%s%s%c", at, "posdata", divider);
                          ^
POS/utils.c:85:0: style: The function 'remove_all_spaces' is never used. [unusedFunction]

^
test/tests.c:6:0: style: The function 'setUp' is never used. [unusedFunction]

^
test/tests.c:9:0: style: The function 'tearDown' is never used. [unusedFunction]

^
nofile:0:0: information: Cppcheck cannot find all the include files (use --check-config for details) [missingIncludeSystem]

